name: Build Stable and Release

on:
  push:
    tags:
      - "v[0-100]+.[0-9]+.[0-1000]-stable"
  workflow_dispatch:
  
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ["3.8"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Install pywin32 (Windows)
        if: runner.os == 'Windows'
        run: pip install pywin32
  
      # 插入构建信息（Windows）
      - name: Insert build info (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $buildInfo = 'BUILD_INFO="Build in ${{github.run_id}}(${{github.sha}})"'
          $versionInfo = 'VERSION="${{github.ref_name}}"'
          $buildInfo | Out-File -FilePath src/buildinfo.py -Encoding utf8
          $versionInfo | Out-File -FilePath src/buildinfo.py -Encoding utf8 -Append

      # 插入构建信息（macOS）
      - name: Insert build info (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          echo 'BUILD_INFO="Build in ${{github.run_id}}(${{github.sha}})"' > src/buildinfo.py
          echo 'VERSION="${{github.ref_name}}"' >> src/buildinfo.py

      - name: Build with PyInstaller
        run: |
          NAME="idv-login-${{github.ref_name}}-Py${{ matrix.python-version }}"
          if [ "${{ runner.os }}" = "macOS" ]; then
            NAME="${NAME}-mac"
          else
            NAME="${NAME}.exe"
          fi
          pyinstaller -F src/main.py -n "$NAME" -i assets/icon.ico --version-file assets/version.txt
        shell: bash

      # SHA256 校验（Windows）
      - name: Calculate checksum (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $file = "dist/idv-login-${{github.ref_name}}-Py${{ matrix.python-version }}.exe"
          Get-FileHash $file |
            Select-Object -ExpandProperty Hash |
            Out-File -Encoding ascii "$file.sha256"

      # SHA256 校验（macOS）
      - name: Calculate checksum (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          file="dist/idv-login-${{github.ref_name}}-Py${{ matrix.python-version }}-mac"
          shasum -a 256 "$file" | cut -d ' ' -f1 > "$file.sha256"

      # 添加测试运行步骤（macOS）
      - name: Test Run on macOS
        if: runner.os == 'macOS'
        shell: bash
        continue-on-error: true
        run: |
          echo "尝试运行程序，将在60秒后自动终止..."
          chmod +x "dist/idv-login-${{github.ref_name}}-Py${{ matrix.python-version }}-mac"
          timeout 60s "dist/idv-login-${{github.ref_name}}-Py${{ matrix.python-version }}-mac" || echo "程序已超时或异常退出"
          echo "测试运行完成，继续下一步"

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.python-version }}
          path: dist/

      - name: Release body
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body_path: ext/${{github.ref_name}}-CHANGELOG

  pack:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.8.4]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Python Embedded
        run: |
          Invoke-WebRequest -Uri https://www.python.org/ftp/python/${{ matrix.python-version }}/python-${{ matrix.python-version }}-embed-amd64.zip -OutFile python-embed.zip
          Expand-Archive python-embed.zip -DestinationPath python-embed

      - name: Set up Python Embedded
        run: |
          Invoke-WebRequest -Uri https://bootstrap.pypa.io/pip/3.8/get-pip.py -OutFile get-pip.py
          .\python-embed\python.exe get-pip.py
          .\python-embed\python.exe -m pip install --upgrade pip
        shell: pwsh

      - name: Install dependencies
        run: |
          .\python-embed\python.exe -m pip install -r requirements.txt
      
      - name: Install pywin32 (Windows)
        if: runner.os == 'Windows'
        run: pip install pywin32

      - name: Insert build info
        run: |
          $buildInfo = 'BUILD_INFO="Build in ${{github.run_id}}(${{github.sha}})"'
          $versionInfo = 'VERSION="${{github.ref_name}}"'
          $buildInfo | Out-File -FilePath src/buildinfo.py -Encoding utf8
          $versionInfo | Out-File -FilePath src/buildinfo.py -Encoding utf8 -Append
        shell: pwsh

      - name: Compile Python files to .pyc
        run: |
            .\python-embed\python.exe  -m compileall src
            Get-ChildItem -Recurse -Filter '*.pyc' | ForEach-Object {
                $newName = $_.Name -replace '\.cpython-3\d+', ''
                if (Test-Path -Path (Join-Path -Path $_.DirectoryName -ChildPath $newName)) {
                    Remove-Item -Path (Join-Path -Path $_.DirectoryName -ChildPath $newName) -Force
                }
                Rename-Item -Path $_.FullName -NewName $newName
            }
            Get-ChildItem -Recurse -Filter '*.pyc' | ForEach-Object { Move-Item $_.FullName -Destination $_.Directory.Parent.FullName }
            Get-ChildItem -Recurse -Filter '*.py' | Remove-Item -Force
            Get-ChildItem -Recurse -Directory -Filter '__pycache__' | Remove-Item -Recurse -Force
        shell: pwsh
      
      - name: Package application
        run: |
          mkdir dist
          Copy-Item -Recurse -Force python-embed dist/python-embed
          Copy-Item -Recurse -Force src dist/src
          Copy-Item -Force tools/点我启动工具.bat dist/点我启动工具.bat
        shell: pwsh

      - name: Compress package
        run: Compress-Archive -Path dist/* -DestinationPath idv-login-${{github.ref_name}}-Py${{ matrix.python-version }}.zip
        shell: pwsh

      - name: Calculate Client checksum
        run: Get-FileHash "idv-login-${{github.ref_name}}-Py${{ matrix.python-version }}.zip" | select-object -ExpandProperty Hash > idv-login-${{github.ref_name}}-Py${{ matrix.python-version }}.zip.sha256

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pack-${{ matrix.python-version }}
          path: |
            idv-login-${{github.ref_name}}-Py${{ matrix.python-version }}.zip
            idv-login-${{github.ref_name}}-Py${{ matrix.python-version }}.zip.sha256

  release:
    needs: [build, pack]
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            **/*.exe
            **/*-mac
            **/*.sha256
            **/*.zip